apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: com.tiemens.VersionClassPlugin
apply from: "$rootDir/gradle/jacoco.gradle"
    
//
// target:  'build'     - does not run integration tests
// target:  'integTest' - runs integration tests (about 5 minutes worth)
// target:  'publish'   - push to archiva (as guest)
// target:  'jacocoTestReport'    'jacocoIntegTestReport' - 
//

group = 'com.tiemens'
version = '1.3.1-SNAPSHOT'
sourceCompatibility = 1.6


dependencies {
    compile     group: 'com.miglayout', name: 'miglayout',        version: '3.7.4'

    testCompile group: 'junit',         name: 'junit',            version: '4+'
}

repositories {
    if (project.hasProperty('archivaBaseUrl') ) {
        maven { url project.archivaBaseUrl + "/internal" }
        maven { url project.archivaBaseUrl + "/snapshots" }
    } else {
        mavenCentral()
    }    
}

sourceSets {
    integTest {
        java.srcDir file("src/integTest/java")
        resources.srcDir file("src/integTest/resources")
        compileClasspath = 
            sourceSets.main.output +
            sourceSets.test.output +
            configurations.testRuntime
        runtimeClasspath = output + compileClasspath
    }
}

test {
    exclude '**/*IntegTest.class'
    reports.html.destination = file ("$reports.html.destination/test")
    reports.junitXml.destination = file ("$reports.junitXml.destination/test")
}

task integTest(type: Test, group: 'Build') {
    testClassesDir = sourceSets.integTest.output.classesDir
    classpath = sourceSets.integTest.runtimeClasspath
    include '**/*IntegTest.class'
    reports.html.destination = file ("$reports.html.destination/integTest")
    reports.junitXml.destination = file ("$reports.junitXml.destination/integTest")
    
    // Your choice:  
    //  check.dependsOn integTest - makes 'build'->check->integTest  runs in 5 minutes
    //  ELSE comment out, and 'build'->check                         runs in 12 seconds
    //check.dependsOn integTest
}

jar {
    manifest {
        attributes("Main-Class" : "com.tiemens.secretshare.main.cli.Main")
    }
}

// Used in publishing:
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

// Used in publishing:
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives jar

    archives sourcesJar
    archives javadocJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourcesJar {
                classifier "sources"
            }
            artifact javadocJar {
                classifier "javadoc"
            }
            // A: reference: http://forums.gradle.org/gradle/topics/maven_publishing_plugin_doesnt_upload_generated_pom_file
            // B: reference: http://books.sonatype.com/nexus-book/reference/bundles.html
            // C: reference: http://blog.sonatype.com/2009/09/maven-tips-and-tricks-using-github/
           // D: reference https://github.com/resteasy/Resteasy/blob/master/jaxrs/pom.xml
            pom.withXml {
                def root = asNode()
                root.appendNode('description', 
                    'Shamir\'s Secret Share in Java')
                root.appendNode('url', 
                    'https://github.com/timtiemens/secretshare')

                def scm = root.appendNode('scm')
                scm.appendNode('url', 
                    //D:  'http://github.com/resteasy/Resteasy/tree/master/'
                         'https://github.com/timtiemens/secretshare/tree/' + 
                                   'v' + version + '/')
                scm.appendNode('connection', 
                    //A: 'scm:https://bmuschko@github.com/bmuschko/gradle-cloudbees-plugin.git'
                    //B: 'scm:git:git://github.com/sonatype/sample-project.git')
                    //C: 'scm:git:git@github.com:tobrien/git-demo.git'
                    //D: 'scm:git:git://github.com/resteasy/Resteasy.git'
                         'scm:git:git://github.com/timtiemens/secretshare.git')
                scm.appendNode('developerConnection', 
                    //A: 'scm:git://github.com/bmuschko/gradle-cloudbees-plugin.git'
                    //B: 'scm:git:git://github.com/sonatype-sample-project.git')
                    //C: 'scm:git:git@github.com:tobrien/git-demo.git'
                    //D: 'scm:git:git@github.com:resteasy/Resteasy.git'
                         'scm:git:git@github.com:timtiemens/secretshare.git')

                def license = root.appendNode('licenses').appendNode('license')
                license.appendNode('name', 
                    'GNU Lesser General Public License (LGPL), Version 2.1')
                license.appendNode('url', 
                    'https://www.gnu.org/licenses/old-licenses/lgpl-2.1.html')
                license.appendNode('distribution', 'repo')

                def developer = root.appendNode('developers').appendNode('developer')
                developer.appendNode('id', 'timtiemens')
                developer.appendNode('name', 'Tim Tiemens')
                // developer.appendNode('email', 'timremote@gmail.com')
                developer.appendNode('url', 'https://github.com/timtiemens')
            }
        }
    }

    repositories {
        maven {
            if (project.hasProperty('publishBaseUrl')) {
                if (project.version.contains("SNAPSHOT")) {
                    url project.publishBaseUrl + "/snapshots"
                } else {
                    url project.publishBaseUrl + "/internal"
                }
            } else {
                    // this 
                    url "http://you.must.configure.project.publishBaseUrl"
            }
        }
    }
}

buildscript {
    repositories {
    }
}

versionClass {
    packageName = "com.tiemens.secretshare"
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.12'
}

